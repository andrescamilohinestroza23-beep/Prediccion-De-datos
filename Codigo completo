# --------------------------------------------
# SISTEMA DE PREDICCIÓN DE APROBACIÓN DE PRÉSTAMOS
# Proyecto Final - Segundo Semestre
# --------------------------------------------
 
import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import os
 
# Archivo Excel donde se guardan los registros
archivo_excel = "base_prestamos.xlsx"
 
# Verificar si ya existe el archivo
if os.path.exists(archivo_excel):
    datos_existentes = pd.read_excel(archivo_excel)
else:
    datos_existentes = pd.DataFrame(columns=[
        "Nombre", "Edad", "Ingreso ($)", "Monto solicitado ($)", "Tipo de préstamo",
        "Historial (puntos)", "Laboral (puntos)", "Puntaje total", "Riesgo",
        "Probabilidad (%)", "Resultado", "Motivo rechazo"
    ])
 
 
# ------------------ FUNCIÓN PRINCIPAL ------------------
def evaluar_prestamo():
    try:
        nombre = entry_nombre.get()
        edad = int(entry_edad.get())
        ingreso = float(entry_ingreso.get())
        monto = float(entry_monto.get())
        tipo = combo_tipo.get()
        contrato = combo_contrato.get()
        anios = int(entry_anios.get())
        historial = combo_historial.get()
 
        # Validación básica
        if nombre.strip() == "" or tipo == "" or contrato == "" or historial == "":
            messagebox.showwarning("Campos vacíos", "Por favor complete todos los campos.")
            return
 
        # Configuración según tipo de préstamo
        if tipo == "Vivienda":
            factor_monto, peso_tipo = 12, 1.1
        elif tipo == "Vehículo":
            factor_monto, peso_tipo = 8, 1.0
        elif tipo == "Negocio":
            factor_monto, peso_tipo = 10, 1.2
        elif tipo == "Estudio":
            factor_monto, peso_tipo = 6, 0.9
        else:
            factor_monto, peso_tipo = 4, 1.0
 
        # Puntos historial crediticio
        if historial == "Excelente":
            puntos_historial = 3
        elif historial == "Bueno":
            puntos_historial = 2
        elif historial == "Regular":
            puntos_historial = 1
        else:
            puntos_historial = 0
 
        # Puntos laborales
        puntos_laborales = 0
        if contrato == "Fijo":
            puntos_laborales += 3
        elif contrato == "Independiente":
            puntos_laborales += 2
        else:
            puntos_laborales += 1
 
        if anios >= 5:
            puntos_laborales += 2
        elif anios >= 2:
            puntos_laborales += 1
 
        # Cálculo general
        puntaje_total = 0
        aprobado = True
        razon = ""
 
        # Edad
        if edad < 18:
            razon = "Menor de edad, no puede solicitar préstamos."
            aprobado = False
        else:
            puntaje_total += 2
 
        # Ingreso
        if ingreso >= 2000:
            puntaje_total += 3
        elif ingreso >= 1000:
            puntaje_total += 2
        else:
            puntaje_total += 1
 
        # Monto solicitado
        if monto <= ingreso * factor_monto:
            puntaje_total += 2
        else:
            aprobado = False
            razon = "Monto demasiado alto respecto al ingreso."
 
        # Historial
        if puntos_historial >= 3:
            puntaje_total += 3
        elif puntos_historial >= 1:
            puntaje_total += 2
 
        # Laboral
        puntaje_total += puntos_laborales / 2
 
        # Riesgo y probabilidad
        if puntaje_total >= 8:
            riesgo = "Bajo"
        elif puntaje_total >= 5:
            riesgo = "Medio"
        else:
            riesgo = "Alto"
 
        probabilidad = (puntaje_total / 10) * 100 * peso_tipo
        if probabilidad > 100:
            probabilidad = 100
 
        if aprobado and puntaje_total >= 6:
            decision = "APROBADO"
        else:
            decision = "RECHAZADO"
 
        # Mostrar resultado
        resultado_texto = f"""
        RESULTADO DE EVALUACIÓN
 
        Solicitante: {nombre}
        Tipo de préstamo: {tipo}
        Edad: {edad} años
        Ingreso mensual: ${ingreso:,.2f}
        Monto solicitado: ${monto:,.2f}
 
        Puntaje total: {puntaje_total:.1f}/10
        Nivel de riesgo: {riesgo}
        Probabilidad de aprobación: {probabilidad:.1f}%
        Resultado final: {decision}
        """
 
        if not aprobado:
            resultado_texto += f"\nMotivo de rechazo: {razon}"
 
        messagebox.showinfo("Resultado del análisis", resultado_texto)
 
        # Guardar en Excel
        nuevo_registro = pd.DataFrame([{
            "Nombre": nombre,
            "Edad": edad,
            "Ingreso ($)": ingreso,
            "Monto solicitado ($)": monto,
            "Tipo de préstamo": tipo,
            "Historial (puntos)": puntos_historial,
            "Laboral (puntos)": puntos_laborales,
            "Puntaje total": puntaje_total,
            "Riesgo": riesgo,
            "Probabilidad (%)": round(probabilidad, 1),
            "Resultado": decision,
            "Motivo rechazo": razon if not aprobado else "-"
        }])
 
        global datos_existentes
        datos_existentes = pd.concat([datos_existentes, nuevo_registro], ignore_index=True)
        datos_existentes.to_excel(archivo_excel, index=False)
 
    except ValueError:
        messagebox.showerror("Error", "Por favor ingrese valores numéricos válidos.")
 
 
# ------------------ INTERFAZ GRÁFICA ------------------
ventana = tk.Tk()
ventana.title("Sistema de Predicción de Aprobación de Préstamos")
ventana.geometry("520x550")
ventana.resizable(False, False)
 
# Título
tk.Label(ventana, text="SISTEMA DE PREDICCIÓN DE APROBACIÓN DE PRÉSTAMOS",
         font=("Arial", 11, "bold"), fg="#004d80").pack(pady=10)
 
# Contenedor principal
frame = tk.Frame(ventana)
frame.pack(pady=5)
 
# Campos
tk.Label(frame, text="Nombre:").grid(row=0, column=0, sticky="e", padx=5, pady=5)
entry_nombre = tk.Entry(frame, width=30)
entry_nombre.grid(row=0, column=1)
 
tk.Label(frame, text="Edad:").grid(row=1, column=0, sticky="e", padx=5, pady=5)
entry_edad = tk.Entry(frame, width=30)
entry_edad.grid(row=1, column=1)
 
tk.Label(frame, text="Ingreso mensual ($):").grid(row=2, column=0, sticky="e", padx=5, pady=5)
entry_ingreso = tk.Entry(frame, width=30)
entry_ingreso.grid(row=2, column=1)
 
tk.Label(frame, text="Monto solicitado ($):").grid(row=3, column=0, sticky="e", padx=5, pady=5)
entry_monto = tk.Entry(frame, width=30)
entry_monto.grid(row=3, column=1)
 
tk.Label(frame, text="Tipo de préstamo:").grid(row=4, column=0, sticky="e", padx=5, pady=5)
combo_tipo = ttk.Combobox(frame, values=["Vivienda", "Vehículo", "Negocio", "Estudio", "Libre inversión"], state="readonly", width=27)
combo_tipo.grid(row=4, column=1)
 
tk.Label(frame, text="Historial crediticio:").grid(row=5, column=0, sticky="e", padx=5, pady=5)
combo_historial = ttk.Combobox(frame, values=["Excelente", "Bueno", "Regular", "Malo"], state="readonly", width=27)
combo_historial.grid(row=5, column=1)
 
tk.Label(frame, text="Tipo de contrato:").grid(row=6, column=0, sticky="e", padx=5, pady=5)
combo_contrato = ttk.Combobox(frame, values=["Fijo", "Independiente", "Temporal"], state="readonly", width=27)
combo_contrato.grid(row=6, column=1)
 
tk.Label(frame, text="Años de trabajo:").grid(row=7, column=0, sticky="e", padx=5, pady=5)
entry_anios = tk.Entry(frame, width=30)
entry_anios.grid(row=7, column=1)
 
# Botón evaluar
btn_evaluar = tk.Button(ventana, text="Evaluar solicitud", bg="#007acc", fg="white",
                        font=("Arial", 11, "bold"), command=evaluar_prestamo)
btn_evaluar.pack(pady=15, ipadx=10, ipady=3)
 
ventana.mainloop()
